import { GetServerSideProps } from "next"
import Head from "next/head"
import { useCallback } from "react"

import { Default } from "../components/Default"
import { DemoComponent, demoExperimentId } from "../components/DemoComponent"
import { InstantBandit } from "../components/InstantBanditComponent"
import { Variant } from "../components/Variant"
import { getProbabilities } from "../lib/db"
import { useInstantBandit } from "../lib/hooks"
import { sendConversion } from "../lib/lib"
import { ProbabilityDistribution } from "../lib/types"
import styles from "../styles/Home.module.css"

export default function Home(serverSideProps: Props) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Instant Bandit</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          // See https://css-tricks.com/emojis-as-favicons/
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>‚öîÔ∏è</text></svg>"
        />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.description}>Welcome to Instant Bandit</h1>
        <InstantBandit>
          <h1>
            <Default>
              Hello
            </Default>
            <Variant name="A">Variant A<br />
              <TestButton>CLICK ME</TestButton>
            </Variant>
            <Variant name="B">Variant B<br />
              <TestButton>CLICK ME</TestButton>
            </Variant>
            <Variant name="C">Variant C<br />
              <TestButton>CLICK ME</TestButton>
            </Variant>
            <button onClick={() => {
              localStorage.clear()
              location.reload()
            }}>Clear Session</button>
          </h1>
        </InstantBandit>
        <p>
          <DemoComponent
            preserveSession={false}
            // comment out this line to fetch probabilities client-side
            probabilities={serverSideProps.probabilities}
          >
            {(props) => {
              return (
                <button
                  className={styles.title}
                  // AB test logic here
                  style={{
                    background: props.variant === "A" ? "red" : "green",
                  }}
                  onClick={() => {
                    alert(`Your click will be recorded`)
                    sendConversion({ experimentIds: [demoExperimentId], value: 1 })
                    // also try:
                    // sendConversion({ experimentIds: [experimentId], value: 99.99 })
                  }}
                >
                  üëâ Click me üëà
                </button>
              )
            }}
          </DemoComponent>

        </p>
      </main>

      <footer className={styles.footer}>
        <a href="/api/_hello" target="_blank">
          Is the server running?
        </a>
        <a href="/api/_database" target="_blank">
          Is the database running?
        </a>
      </footer>
    </div>
  )
}

export function TestButton(props) {
  const ctx = useInstantBandit()
  const { site, metrics, experiment, variant } = ctx

  const onClick = useCallback(() => {
    metrics.sinkEvent(ctx, "conversions")
  }, [site, experiment, variant])

  return (
    <button onClick={onClick}>{props.children}</button>
  )
}

type Props = {
  probabilities: ProbabilityDistribution | null
}
export const getStaticProps: GetServerSideProps<Props> = async () => {
  const [probabilities] = await getProbabilities(demoExperimentId)
  return {
    props: { probabilities },
  }
}
